# Decision Tree with Car Evaluation Dataset

# %%
# 1. Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn import tree

# %%
# 2. Load dataset
url = "car_evaluation.csv"
column_names = ['buying','maint','doors','persons','lug_boot','safety','class']
df = pd.read_csv(url, names=column_names)

# %%
# 3. Tampilkan data awal dan deskripsi
print(df.head())
print(df.describe(include='all'))

# %%
# 4. Encode data kategorikal
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
for col in df.columns:
    df[col] = le.fit_transform(df[col])

# %%
# 5. Visualisasi awal
df['class'].value_counts().plot(kind='bar', title='Distribusi Kelas')
plt.show()

# %%
# 6. Split data
X = df.drop('class', axis=1)
y = df['class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print(f"Training data: {len(X_train)}, Testing data: {len(X_test)}")

# %%
# 7. Buat model Decision Tree
model = DecisionTreeClassifier(criterion='entropy')
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# %%
# 8. Classification report
print(classification_report(y_test, y_pred))

# %%
# 9. Confusion matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='YlGnBu')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# %%
# 10. Visualisasi pohon keputusan
feature_names = X.columns
fig, ax = plt.subplots(figsize=(20, 10))
tree.plot_tree(model, feature_names=feature_names, class_names=['acc','good','unacc','vgood'], filled=True)
plt.show()

# %%
# 11. Prediksi data baru
sample = pd.DataFrame([[3, 3, 2, 2, 1, 2]], columns=feature_names)
prediction = model.predict(sample)
print("Prediksi kelas:", prediction)
